{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient, InMemoryCache, defaultDataIdFromObject, from, HttpLink } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { config } from '~src/config';\nimport { AuthLink } from './auth-link';\nimport { ErrorLink } from './error-link';\nvar apolloClient;\nexport function useApollo() {\n  _s();\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var store = useMemo(function () {\n    return initializeApollo(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useApollo, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");\n\nexport function createApolloClient(_, __) {\n  var link = from([AuthLink, ErrorLink, new HttpLink({\n    uri: \"\".concat(config.API_URL, \"/graphql\")\n  })]);\n  var cache = new InMemoryCache({\n    addTypename: false,\n    dataIdFromObject: function dataIdFromObject(obj) {\n      switch (obj.__typename) {\n        case 'Page':\n          return obj.slug;\n\n        default:\n          return defaultDataIdFromObject(obj);\n      }\n    }\n  });\n  return new ApolloClient({\n    cache: cache,\n    link: link\n  });\n}\n\nfunction initializeApollo() {\n  var _apolloClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    var existingCache = _apolloClient.extract(); // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n\n\n    _apolloClient.cache.restore(_objectSpread(_objectSpread({}, existingCache), initialState));\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (false) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}","map":{"version":3,"sources":["/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/helpers/graphql/apollo-client.ts"],"names":["ApolloClient","InMemoryCache","defaultDataIdFromObject","from","HttpLink","useMemo","config","AuthLink","ErrorLink","apolloClient","useApollo","initialState","store","initializeApollo","createApolloClient","_","__","link","uri","API_URL","cache","addTypename","dataIdFromObject","obj","__typename","slug","_apolloClient","existingCache","extract","restore"],"mappings":";;;;;;;;AAAA,SACEA,YADF,EAEEC,aAFF,EAGEC,uBAHF,EAIEC,IAJF,EAKEC,QALF,QAOO,gBAPP;AAQA,SAASC,OAAT,QAAwB,OAAxB;AAGA,SAASC,MAAT,QAAuB,aAAvB;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,IAAIC,YAAJ;AAEA,OAAO,SAASC,SAAT,GAAsC;AAAA;;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AAC3C,MAAMC,KAAK,GAAGP,OAAO,CAAC;AAAA,WAAMQ,gBAAgB,CAACF,YAAD,CAAtB;AAAA,GAAD,EAAuC,CAACA,YAAD,CAAvC,CAArB;AACA,SAAOC,KAAP;AACD;;GAHeF,S;;AAKhB,OAAO,SAASI,kBAAT,CAA4BC,CAA5B,EAAqCC,EAArC,EAA2D;AAChE,MAAMC,IAAI,GAAGd,IAAI,CAAC,CAChBI,QADgB,EAEhBC,SAFgB,EAGhB,IAAIJ,QAAJ,CAAa;AAAEc,IAAAA,GAAG,YAAKZ,MAAM,CAACa,OAAZ;AAAL,GAAb,CAHgB,CAAD,CAAjB;AAMA,MAAMC,KAAK,GAAG,IAAInB,aAAJ,CAAkB;AAC9BoB,IAAAA,WAAW,EAAE,KADiB;AAE9BC,IAAAA,gBAAgB,EAAE,0BAACC,GAAD,EAAc;AAC9B,cAAQA,GAAG,CAACC,UAAZ;AACE,aAAK,MAAL;AACE,iBAAOD,GAAG,CAACE,IAAX;;AACF;AACE,iBAAOvB,uBAAuB,CAACqB,GAAD,CAA9B;AAJJ;AAMD;AAT6B,GAAlB,CAAd;AAYA,SAAO,IAAIvB,YAAJ,CAAiB;AAAEoB,IAAAA,KAAK,EAALA,KAAF;AAASH,IAAAA,IAAI,EAAJA;AAAT,GAAjB,CAAP;AACD;;AAED,SAASJ,gBAAT,GAA6C;AAAA;;AAAA,MAAnBF,YAAmB,uEAAJ,EAAI;;AAC3C,MAAMe,aAAa,qBAAGjB,YAAH,2DAAmBK,kBAAkB,EAAxD,CAD2C,CAG3C;AACA;;;AACA,MAAIH,YAAJ,EAAkB;AAChB;AACA,QAAMgB,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAGhB;AACA;;;AACAF,IAAAA,aAAa,CAACN,KAAd,CAAoBS,OAApB,iCAAiCF,aAAjC,GAAmDhB,YAAnD;AACD,GAX0C,CAY3C;;;AACA,aAAmC,OAAOe,aAAP,CAbQ,CAc3C;;AACA,MAAI,CAACjB,YAAL,EAAmBA,YAAY,GAAGiB,aAAf;AAEnB,SAAOA,aAAP;AACD","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  defaultDataIdFromObject,\n  from,\n  HttpLink,\n  NormalizedCacheObject,\n} from '@apollo/client'\nimport { useMemo } from 'react'\nimport { NextPageContext } from 'next'\n\nimport { config } from '~src/config'\n\nimport { AuthLink } from './auth-link'\nimport { ErrorLink } from './error-link'\n\nlet apolloClient: ApolloClient<NormalizedCacheObject>\n\nexport function useApollo(initialState = {}) {\n  const store = useMemo(() => initializeApollo(initialState), [initialState])\n  return store\n}\n\nexport function createApolloClient(_?: any, __?: NextPageContext) {\n  const link = from([\n    AuthLink as any,\n    ErrorLink,\n    new HttpLink({ uri: `${config.API_URL}/graphql` }),\n  ])\n\n  const cache = new InMemoryCache({\n    addTypename: false,\n    dataIdFromObject: (obj: any) => {\n      switch (obj.__typename) {\n        case 'Page':\n          return obj.slug\n        default:\n          return defaultDataIdFromObject(obj)\n      }\n    },\n  })\n\n  return new ApolloClient({ cache, link })\n}\n\nfunction initializeApollo(initialState = {}) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract()\n    // Restore the cache using the data passed from getStaticProps/getServerSideProps\n    // combined with the existing cached data\n    _apolloClient.cache.restore({ ...existingCache, ...initialState })\n  }\n  // For SSG and SSR always create a new Apollo Client\n  if (typeof window === 'undefined') return _apolloClient\n  // Create the Apollo Client once in the client\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}