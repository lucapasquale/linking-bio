{"ast":null,"code":"import { fromPromise, gql } from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\nimport { config } from '~src/config';\nimport { createApolloClient } from './apollo-client';\nexport const ErrorLink = onError(({\n  graphQLErrors,\n  operation,\n  forward\n}) => {\n  if (!graphQLErrors || !graphQLErrors.length) {\n    return;\n  }\n\n  for (const gqlError of graphQLErrors) {\n    if (!isUnauthorizedError(gqlError) || isRefreshTokenOperation(operation)) {\n      return;\n    }\n\n    return fromPromise(getNewTokens().catch(err => {\n      localStorage.removeItem(config.ACCESS_TOKEN_KEY);\n      localStorage.removeItem(config.REFRESH_TOKEN_KEY);\n      throw err;\n    })).flatMap(accessToken => {\n      // modify the operation context with a new token\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${accessToken}`\n        }\n      }); // retry the request, returning the new observable\n\n      return forward(operation);\n    });\n  }\n\n  return;\n});\n\nfunction isUnauthorizedError(error) {\n  return error && error.message === 'Unauthorized';\n}\n\nfunction isRefreshTokenOperation(operation) {\n  return operation && operation.operationName === 'RefreshToken';\n}\n\nconst REFRESH_TOKEN_MUTATION = gql`\n  mutation RefreshToken($token: String!) {\n    refreshToken(token: $token) {\n      accessToken\n      refreshToken\n    }\n  }\n`;\n\nasync function getNewTokens() {\n  const existingRefreshToken = localStorage.getItem(config.REFRESH_TOKEN_KEY);\n\n  if (!existingRefreshToken) {\n    return;\n  }\n\n  const client = createApolloClient();\n  const {\n    data\n  } = await client.mutate({\n    mutation: REFRESH_TOKEN_MUTATION,\n    variables: {\n      token: existingRefreshToken\n    },\n    errorPolicy: 'none'\n  });\n\n  if (!data) {\n    return;\n  }\n\n  const {\n    accessToken,\n    refreshToken\n  } = data.refreshToken;\n  localStorage.setItem(config.ACCESS_TOKEN_KEY, accessToken);\n  localStorage.setItem(config.REFRESH_TOKEN_KEY, refreshToken);\n  return accessToken;\n}","map":{"version":3,"sources":["/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/helpers/graphql/error-link.ts"],"names":["fromPromise","gql","onError","config","createApolloClient","ErrorLink","graphQLErrors","operation","forward","length","gqlError","isUnauthorizedError","isRefreshTokenOperation","getNewTokens","catch","err","localStorage","removeItem","ACCESS_TOKEN_KEY","REFRESH_TOKEN_KEY","flatMap","accessToken","setContext","headers","authorization","error","message","operationName","REFRESH_TOKEN_MUTATION","existingRefreshToken","getItem","client","data","mutate","mutation","variables","token","errorPolicy","refreshToken","setItem"],"mappings":"AACA,SAASA,WAAT,EAAsBC,GAAtB,QAA4C,gBAA5C;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,OAAO,MAAMC,SAAS,GAAGH,OAAO,CAAC,CAAC;AAAEI,EAAAA,aAAF;AAAiBC,EAAAA,SAAjB;AAA4BC,EAAAA;AAA5B,CAAD,KAA2C;AAC1E,MAAI,CAACF,aAAD,IAAkB,CAACA,aAAa,CAACG,MAArC,EAA6C;AAC3C;AACD;;AAED,OAAK,MAAMC,QAAX,IAAuBJ,aAAvB,EAAsC;AACpC,QAAI,CAACK,mBAAmB,CAACD,QAAD,CAApB,IAAkCE,uBAAuB,CAACL,SAAD,CAA7D,EAA0E;AACxE;AACD;;AAED,WAAOP,WAAW,CAChBa,YAAY,GAAGC,KAAf,CAAsBC,GAAD,IAAS;AAC5BC,MAAAA,YAAY,CAACC,UAAb,CAAwBd,MAAM,CAACe,gBAA/B;AACAF,MAAAA,YAAY,CAACC,UAAb,CAAwBd,MAAM,CAACgB,iBAA/B;AAEA,YAAMJ,GAAN;AACD,KALD,CADgB,CAAX,CAOLK,OAPK,CAOIC,WAAD,IAAiB;AACzB;AACAd,MAAAA,SAAS,CAACe,UAAV,CAAqB;AACnBC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,aAAa,EAAG,UAASH,WAAY;AAAvC;AADU,OAArB,EAFyB,CAMzB;;AACA,aAAOb,OAAO,CAACD,SAAD,CAAd;AACD,KAfM,CAAP;AAgBD;;AAED;AACD,CA7B+B,CAAzB;;AA+BP,SAASI,mBAAT,CAA6Bc,KAA7B,EAAkD;AAChD,SAAOA,KAAK,IAAIA,KAAK,CAACC,OAAN,KAAkB,cAAlC;AACD;;AAED,SAASd,uBAAT,CAAiCL,SAAjC,EAAuD;AACrD,SAAOA,SAAS,IAAIA,SAAS,CAACoB,aAAV,KAA4B,cAAhD;AACD;;AAED,MAAMC,sBAAsB,GAAG3B,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;;AASA,eAAeY,YAAf,GAA8B;AAC5B,QAAMgB,oBAAoB,GAAGb,YAAY,CAACc,OAAb,CAAqB3B,MAAM,CAACgB,iBAA5B,CAA7B;;AACA,MAAI,CAACU,oBAAL,EAA2B;AACzB;AACD;;AAED,QAAME,MAAM,GAAG3B,kBAAkB,EAAjC;AACA,QAAM;AAAE4B,IAAAA;AAAF,MAAW,MAAMD,MAAM,CAACE,MAAP,CAAc;AACnCC,IAAAA,QAAQ,EAAEN,sBADyB;AAEnCO,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAEP;AAAT,KAFwB;AAGnCQ,IAAAA,WAAW,EAAE;AAHsB,GAAd,CAAvB;;AAMA,MAAI,CAACL,IAAL,EAAW;AACT;AACD;;AAED,QAAM;AAAEX,IAAAA,WAAF;AAAeiB,IAAAA;AAAf,MAAgCN,IAAI,CAACM,YAA3C;AACAtB,EAAAA,YAAY,CAACuB,OAAb,CAAqBpC,MAAM,CAACe,gBAA5B,EAA8CG,WAA9C;AACAL,EAAAA,YAAY,CAACuB,OAAb,CAAqBpC,MAAM,CAACgB,iBAA5B,EAA+CmB,YAA/C;AAEA,SAAOjB,WAAP;AACD","sourcesContent":["import { GraphQLError } from 'graphql'\nimport { fromPromise, gql, Operation } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error'\n\nimport { config } from '~src/config'\nimport { createApolloClient } from './apollo-client'\n\nexport const ErrorLink = onError(({ graphQLErrors, operation, forward }) => {\n  if (!graphQLErrors || !graphQLErrors.length) {\n    return\n  }\n\n  for (const gqlError of graphQLErrors) {\n    if (!isUnauthorizedError(gqlError) || isRefreshTokenOperation(operation)) {\n      return\n    }\n\n    return fromPromise(\n      getNewTokens().catch((err) => {\n        localStorage.removeItem(config.ACCESS_TOKEN_KEY)\n        localStorage.removeItem(config.REFRESH_TOKEN_KEY)\n\n        throw err\n      })\n    ).flatMap((accessToken) => {\n      // modify the operation context with a new token\n      operation.setContext({\n        headers: { authorization: `Bearer ${accessToken}` },\n      })\n\n      // retry the request, returning the new observable\n      return forward(operation)\n    })\n  }\n\n  return\n})\n\nfunction isUnauthorizedError(error: GraphQLError) {\n  return error && error.message === 'Unauthorized'\n}\n\nfunction isRefreshTokenOperation(operation: Operation) {\n  return operation && operation.operationName === 'RefreshToken'\n}\n\nconst REFRESH_TOKEN_MUTATION = gql`\n  mutation RefreshToken($token: String!) {\n    refreshToken(token: $token) {\n      accessToken\n      refreshToken\n    }\n  }\n`\n\nasync function getNewTokens() {\n  const existingRefreshToken = localStorage.getItem(config.REFRESH_TOKEN_KEY)\n  if (!existingRefreshToken) {\n    return\n  }\n\n  const client = createApolloClient()\n  const { data } = await client.mutate({\n    mutation: REFRESH_TOKEN_MUTATION,\n    variables: { token: existingRefreshToken },\n    errorPolicy: 'none',\n  })\n\n  if (!data) {\n    return\n  }\n\n  const { accessToken, refreshToken } = data.refreshToken\n  localStorage.setItem(config.ACCESS_TOKEN_KEY, accessToken)\n  localStorage.setItem(config.REFRESH_TOKEN_KEY, refreshToken)\n\n  return accessToken\n}\n"]},"metadata":{},"sourceType":"module"}