{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Auth/routes/Login/components/Form.tsx\";\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { InputAdornment, IconButton, makeStyles } from '@material-ui/core';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { Button } from '~components/Button';\nimport { InputFormItem } from '~components/InputFormItem';\nimport { useEmailLoginMutation } from '../graphql/email-login';\nimport { AuthLink } from '../../../components/AuthLink';\nconst useStyles = makeStyles(theme => ({\n  button: {\n    alignSelf: 'flex-end',\n    marginTop: theme.spacing(2)\n  }\n}));\nexport const Form = ({\n  onSuccess\n}) => {\n  var _errors$email, _errors$password;\n\n  const classes = useStyles();\n  const [loginMutation, {\n    loading\n  }] = useEmailLoginMutation();\n  const {\n    0: showPass,\n    1: setShowPass\n  } = useState(false);\n  const {\n    register,\n    handleSubmit,\n    watch,\n    errors,\n    setError\n  } = useForm();\n  const emailQueryString = watch('email') ? `?email=${watch('email')}` : '';\n\n  const login = async variables => {\n    try {\n      const {\n        data\n      } = await loginMutation({\n        variables\n      });\n\n      if (data) {\n        onSuccess(data.login.accessToken, data.login.refreshToken);\n      }\n    } catch (e) {\n      setError('password', {\n        type: 'invalid',\n        message: 'Please check your email and password!'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(login),\n      children: [/*#__PURE__*/_jsxDEV(InputFormItem, {\n        field: \"email\",\n        label: \"Email\",\n        autoComplete: \"on\",\n        type: \"email\",\n        errorMessage: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n        inputRef: register({\n          required: 'Email is required'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputFormItem, {\n        field: \"password\",\n        label: \"Password\",\n        type: showPass ? 'text' : 'password',\n        errorMessage: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n        inputRef: register({\n          required: 'Password is required'\n        }),\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => setShowPass(!showPass),\n              onMouseDown: e => e.preventDefault(),\n              children: showPass ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 31\n              }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"submit\",\n        loading: loading,\n        className: classes.button,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AuthLink, {\n      title: \"Forgot your password?\",\n      href: `/auth/forgot-password${emailQueryString}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AuthLink, {\n      title: \"Create account\",\n      href: `/auth/signup${emailQueryString}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};","map":{"version":3,"sources":["/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Auth/routes/Login/components/Form.tsx"],"names":["React","useState","useForm","InputAdornment","IconButton","makeStyles","Visibility","VisibilityOff","Button","InputFormItem","useEmailLoginMutation","AuthLink","useStyles","theme","button","alignSelf","marginTop","spacing","Form","onSuccess","classes","loginMutation","loading","showPass","setShowPass","register","handleSubmit","watch","errors","setError","emailQueryString","login","variables","data","accessToken","refreshToken","e","type","message","email","required","password","endAdornment","preventDefault"],"mappings":"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","sourcesContent":["import React, { FC, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { InputAdornment, IconButton, makeStyles } from '@material-ui/core'\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\n\nimport { Button } from '~components/Button'\nimport { InputFormItem } from '~components/InputFormItem'\nimport { EmailLoginMutationVariables } from '~helpers/graphql/generated'\n\nimport { useEmailLoginMutation } from '../graphql/email-login'\nimport { AuthLink } from '../../../components/AuthLink'\n\nconst useStyles = makeStyles((theme) => ({\n  button: { alignSelf: 'flex-end', marginTop: theme.spacing(2) },\n}))\n\ntype Props = {\n  onSuccess: (accessToken: string, refreshToken: string) => void\n}\n\nexport const Form: FC<Props> = ({ onSuccess }) => {\n  const classes = useStyles()\n  const [loginMutation, { loading }] = useEmailLoginMutation()\n\n  const [showPass, setShowPass] = useState(false)\n  const { register, handleSubmit, watch, errors, setError } = useForm<EmailLoginMutationVariables>()\n\n  const emailQueryString = watch('email') ? `?email=${watch('email')}` : ''\n\n  const login = async (variables: EmailLoginMutationVariables) => {\n    try {\n      const { data } = await loginMutation({ variables })\n\n      if (data) {\n        onSuccess(data.login.accessToken, data.login.refreshToken)\n      }\n    } catch (e) {\n      setError('password', { type: 'invalid', message: 'Please check your email and password!' })\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(login)}>\n        <InputFormItem\n          field=\"email\"\n          label=\"Email\"\n          autoComplete=\"on\"\n          type=\"email\"\n          errorMessage={errors.email?.message}\n          inputRef={register({ required: 'Email is required' })}\n        />\n\n        <InputFormItem\n          field=\"password\"\n          label=\"Password\"\n          type={showPass ? 'text' : 'password'}\n          errorMessage={errors.password?.message}\n          inputRef={register({ required: 'Password is required' })}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={() => setShowPass(!showPass)}\n                  onMouseDown={(e) => e.preventDefault()}\n                >\n                  {showPass ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          type=\"submit\"\n          loading={loading}\n          className={classes.button}\n        >\n          Login\n        </Button>\n      </form>\n\n      <AuthLink title=\"Forgot your password?\" href={`/auth/forgot-password${emailQueryString}`} />\n      <AuthLink title=\"Create account\" href={`/auth/signup${emailQueryString}`} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}