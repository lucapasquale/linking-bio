{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Admin/routes/Home/components/SortableLinks/index.tsx\";\nimport React, { useState } from 'react';\nimport { ReactSortable } from 'react-sortablejs';\nimport { sortLinksMutation } from './graphql/sort-links';\nimport { LinkItem } from './LinkItem';\nexport const SortableLinks = ({\n  page\n}) => {\n  const [sortLinks] = sortLinksMutation();\n  const {\n    0: links,\n    1: setLinks\n  } = useState(page.links);\n\n  const onDragEnd = async evt => {\n    if (evt.oldIndex === evt.newIndex) {\n      return;\n    }\n\n    await sortLinks({\n      variables: {\n        linkIds: links.map(link => link.id)\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ReactSortable, {\n    list: links,\n    setList: setLinks,\n    onEnd: onDragEnd,\n    handle: \".dragable\",\n    children: links.map(link => /*#__PURE__*/_jsxDEV(LinkItem, {\n      link: link\n    }, link.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Admin/routes/Home/components/SortableLinks/index.tsx"],"names":["React","useState","ReactSortable","sortLinksMutation","LinkItem","SortableLinks","page","sortLinks","links","setLinks","onDragEnd","evt","oldIndex","newIndex","variables","linkIds","map","link","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA6C,kBAA7C;AAIA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAMA,OAAO,MAAMC,aAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AACpD,QAAM,CAACC,SAAD,IAAcJ,iBAAiB,EAArC;AACA,QAAM;AAAA,OAACK,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAACK,IAAI,CAACE,KAAN,CAAlC;;AAEA,QAAME,SAAS,GAAG,MAAOC,GAAP,IAA8B;AAC9C,QAAIA,GAAG,CAACC,QAAJ,KAAiBD,GAAG,CAACE,QAAzB,EAAmC;AACjC;AACD;;AAED,UAAMN,SAAS,CAAC;AACdO,MAAAA,SAAS,EAAE;AAAEC,QAAAA,OAAO,EAAEP,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAUA,IAAI,CAACC,EAAzB;AAAX;AADG,KAAD,CAAf;AAGD,GARD;;AAUA,sBACE,QAAC,aAAD;AAAe,IAAA,IAAI,EAAEV,KAArB;AAA4B,IAAA,OAAO,EAAEC,QAArC;AAA+C,IAAA,KAAK,EAAEC,SAAtD;AAAiE,IAAA,MAAM,EAAC,WAAxE;AAAA,cACGF,KAAK,CAACQ,GAAN,CAAWC,IAAD,iBACT,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CArBM","sourcesContent":["import React, { FC, useState } from 'react'\nimport { ReactSortable, SortableEvent } from 'react-sortablejs'\n\nimport { User } from '~Admin/graphql/user-page'\n\nimport { sortLinksMutation } from './graphql/sort-links'\nimport { LinkItem } from './LinkItem'\n\ntype Props = {\n  page: User['page']\n}\n\nexport const SortableLinks: FC<Props> = ({ page }) => {\n  const [sortLinks] = sortLinksMutation()\n  const [links, setLinks] = useState(page.links)\n\n  const onDragEnd = async (evt: SortableEvent) => {\n    if (evt.oldIndex === evt.newIndex) {\n      return\n    }\n\n    await sortLinks({\n      variables: { linkIds: links.map((link) => link.id) },\n    })\n  }\n\n  return (\n    <ReactSortable list={links} setList={setLinks} onEnd={onDragEnd} handle=\".dragable\">\n      {links.map((link) => (\n        <LinkItem key={link.id} link={link} />\n      ))}\n    </ReactSortable>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}