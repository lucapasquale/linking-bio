{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Auth/routes/Login/components/Form.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { InputAdornment, IconButton, makeStyles } from '@material-ui/core';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { Button } from '~components/Button';\nimport { InputFormItem } from '~components/InputFormItem';\nimport { useEmailLoginMutation } from '../graphql/email-login';\nimport { AuthLink } from '../../../components/AuthLink';\nvar useStyles = makeStyles(function (theme) {\n  return {\n    button: {\n      alignSelf: 'flex-end',\n      marginTop: theme.spacing(2)\n    }\n  };\n});\nexport var Form = function Form(_ref) {\n  _s();\n\n  var _errors$email, _errors$password;\n\n  var onSuccess = _ref.onSuccess;\n  var classes = useStyles();\n\n  var _useEmailLoginMutatio = useEmailLoginMutation(),\n      _useEmailLoginMutatio2 = _slicedToArray(_useEmailLoginMutatio, 2),\n      loginMutation = _useEmailLoginMutatio2[0],\n      loading = _useEmailLoginMutatio2[1].loading;\n\n  var _useState = useState(false),\n      showPass = _useState[0],\n      setShowPass = _useState[1];\n\n  var _useForm = useForm(),\n      register = _useForm.register,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      errors = _useForm.errors,\n      setError = _useForm.setError;\n\n  var emailQueryString = watch('email') ? \"?email=\".concat(watch('email')) : '';\n\n  var login = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(variables) {\n      var _yield$loginMutation, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return loginMutation({\n                variables: variables\n              });\n\n            case 3:\n              _yield$loginMutation = _context.sent;\n              data = _yield$loginMutation.data;\n\n              if (data) {\n                onSuccess(data.login.accessToken, data.login.refreshToken);\n              }\n\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              setError('password', {\n                type: 'invalid',\n                message: 'Please check your email and password!'\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function login(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(login),\n      children: [/*#__PURE__*/_jsxDEV(InputFormItem, {\n        field: \"email\",\n        label: \"Email\",\n        autoComplete: \"on\",\n        type: \"email\",\n        errorMessage: (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message,\n        inputRef: register({\n          required: 'Email is required'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(InputFormItem, {\n        field: \"password\",\n        label: \"Password\",\n        type: showPass ? 'text' : 'password',\n        errorMessage: (_errors$password = errors.password) === null || _errors$password === void 0 ? void 0 : _errors$password.message,\n        inputRef: register({\n          required: 'Password is required'\n        }),\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: function onClick() {\n                return setShowPass(!showPass);\n              },\n              onMouseDown: function onMouseDown(e) {\n                return e.preventDefault();\n              },\n              children: showPass ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 31\n              }, _this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 48\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, _this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        type: \"submit\",\n        loading: loading,\n        className: classes.button,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AuthLink, {\n      title: \"Forgot your password?\",\n      href: \"/auth/forgot-password\".concat(emailQueryString)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(AuthLink, {\n      title: \"Create account\",\n      href: \"/auth/signup\".concat(emailQueryString)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Form, \"E47GKVE8xOlTkVYXFZ9X7CO0Tik=\", false, function () {\n  return [useStyles, useEmailLoginMutation, useForm];\n});\n\n_c = Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/luca/code/lucapasquale/linking-bio/packages/frontend/src/modules/Auth/routes/Login/components/Form.tsx"],"names":["React","useState","useForm","InputAdornment","IconButton","makeStyles","Visibility","VisibilityOff","Button","InputFormItem","useEmailLoginMutation","AuthLink","useStyles","theme","button","alignSelf","marginTop","spacing","Form","onSuccess","classes","loginMutation","loading","showPass","setShowPass","register","handleSubmit","watch","errors","setError","emailQueryString","login","variables","data","accessToken","refreshToken","type","message","email","required","password","endAdornment","e","preventDefault"],"mappings":"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","sourcesContent":["import React, { FC, useState } from 'react'\nimport { useForm } from 'react-hook-form'\nimport { InputAdornment, IconButton, makeStyles } from '@material-ui/core'\nimport { Visibility, VisibilityOff } from '@material-ui/icons'\n\nimport { Button } from '~components/Button'\nimport { InputFormItem } from '~components/InputFormItem'\nimport { EmailLoginMutationVariables } from '~helpers/graphql/generated'\n\nimport { useEmailLoginMutation } from '../graphql/email-login'\nimport { AuthLink } from '../../../components/AuthLink'\n\nconst useStyles = makeStyles((theme) => ({\n  button: { alignSelf: 'flex-end', marginTop: theme.spacing(2) },\n}))\n\ntype Props = {\n  onSuccess: (accessToken: string, refreshToken: string) => void\n}\n\nexport const Form: FC<Props> = ({ onSuccess }) => {\n  const classes = useStyles()\n  const [loginMutation, { loading }] = useEmailLoginMutation()\n\n  const [showPass, setShowPass] = useState(false)\n  const { register, handleSubmit, watch, errors, setError } = useForm<EmailLoginMutationVariables>()\n\n  const emailQueryString = watch('email') ? `?email=${watch('email')}` : ''\n\n  const login = async (variables: EmailLoginMutationVariables) => {\n    try {\n      const { data } = await loginMutation({ variables })\n\n      if (data) {\n        onSuccess(data.login.accessToken, data.login.refreshToken)\n      }\n    } catch (e) {\n      setError('password', { type: 'invalid', message: 'Please check your email and password!' })\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(login)}>\n        <InputFormItem\n          field=\"email\"\n          label=\"Email\"\n          autoComplete=\"on\"\n          type=\"email\"\n          errorMessage={errors.email?.message}\n          inputRef={register({ required: 'Email is required' })}\n        />\n\n        <InputFormItem\n          field=\"password\"\n          label=\"Password\"\n          type={showPass ? 'text' : 'password'}\n          errorMessage={errors.password?.message}\n          inputRef={register({ required: 'Password is required' })}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <IconButton\n                  onClick={() => setShowPass(!showPass)}\n                  onMouseDown={(e) => e.preventDefault()}\n                >\n                  {showPass ? <Visibility /> : <VisibilityOff />}\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          type=\"submit\"\n          loading={loading}\n          className={classes.button}\n        >\n          Login\n        </Button>\n      </form>\n\n      <AuthLink title=\"Forgot your password?\" href={`/auth/forgot-password${emailQueryString}`} />\n      <AuthLink title=\"Create account\" href={`/auth/signup${emailQueryString}`} />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}